
[TestPrinter/Use_of_interfaces_within_frontmatter - 1]
## Input

```
/-/-/-/
interface MarkdownFrontmatter {
    date: number;
    image: string;
    author: string;
}
let allPosts = Astro.fetchContent<MarkdownFrontmatter>('./post/*.md');
/-/-/-/
<div>testing</div>
```

## Output

```js
import {
  Fragment,
  render as $$render,
  createAstro as $$createAstro,
  createComponent as $$createComponent,
  renderComponent as $$renderComponent,
  renderHead as $$renderHead,
  maybeRenderHead as $$maybeRenderHead,
  unescapeHTML as $$unescapeHTML,
  renderSlot as $$renderSlot,
  mergeSlots as $$mergeSlots,
  addAttribute as $$addAttribute,
  spreadAttributes as $$spreadAttributes,
  defineStyleVars as $$defineStyleVars,
  defineScriptVars as $$defineScriptVars,
  renderTransition as $$renderTransition,
  createTransitionScope as $$createTransitionScope,
  renderScript as $$renderScript,
  createMetadata as $$createMetadata
} from "http://localhost:3000/";

export const $$metadata = $$createMetadata(import.meta.url, { modules: [], hydratedComponents: [], clientOnlyComponents: [], hydrationDirectives: new Set([]), hoisted: [] });

const $$Astro = $$createAstro('https://astro.build');
const Astro = $$Astro;
const $$Component = $$createComponent(($$result, $$props, $$slots) => {
const Astro = $$result.createAstro($$Astro, $$props, $$slots);
Astro.self = $$Component;

interface MarkdownFrontmatter {
    date: number;
    image: string;
    author: string;
}
let allPosts = Astro.fetchContent<MarkdownFrontmatter>('./post/*.md');

return $$render`${$$maybeRenderHead($$result)}<div>testing</div>`;
}, undefined, undefined);
export default $$Component;
```
---
