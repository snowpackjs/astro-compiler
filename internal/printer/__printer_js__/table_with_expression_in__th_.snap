
[TestPrinter/table_with_expression_in_'th' - 1]
## Input

```
/-/-/-/
const { title, footnotes, tables } = Astro.props;

interface Table {
    title: string;
    data: any[];
    showTitle: boolean;
    footnotes: string;
}
console.log(tables);
/-/-/-/

<div>
    <div>
    <h2>
        {title}
    </h2>
    {
        tables.map((table: Table) => (
        <>
            <div>
            <h3 class="text-3xl sm:text-5xl font-bold">{table.title}</h3>
            <table>
                <thead>
                {Object.keys(table.data[0]).map((thead) => (
                    <th>{thead}</th>
                ))}
                </thead>
                <tbody>
                {table.data.map((trow) => (
                    <tr>
                    {Object.values(trow).map((cell, index) => (
                        <td>
                        {cell}
                        </td>
                    ))}
                    </tr>
                ))}
                </tbody>
            </table>
            </div>
        </>
        ))
    }
    </div>
</div>
```

## Output

```js
import {
  Fragment,
  render as $$render,
  createAstro as $$createAstro,
  createComponent as $$createComponent,
  renderComponent as $$renderComponent,
  renderHead as $$renderHead,
  maybeRenderHead as $$maybeRenderHead,
  unescapeHTML as $$unescapeHTML,
  renderSlot as $$renderSlot,
  mergeSlots as $$mergeSlots,
  addAttribute as $$addAttribute,
  spreadAttributes as $$spreadAttributes,
  defineStyleVars as $$defineStyleVars,
  defineScriptVars as $$defineScriptVars,
  renderTransition as $$renderTransition,
  createTransitionScope as $$createTransitionScope,
  renderScript as $$renderScript,
  createMetadata as $$createMetadata
} from "http://localhost:3000/";

export const $$metadata = $$createMetadata(import.meta.url, { modules: [], hydratedComponents: [], clientOnlyComponents: [], hydrationDirectives: new Set([]), hoisted: [] });

const $$Astro = $$createAstro('https://astro.build');
const Astro = $$Astro;
const $$Component = $$createComponent(($$result, $$props, $$slots) => {
const Astro = $$result.createAstro($$Astro, $$props, $$slots);
Astro.self = $$Component;

const { title, footnotes, tables } = Astro.props;

interface Table {
    title: string;
    data: any[];
    showTitle: boolean;
    footnotes: string;
}
console.log(tables);

return $$render`${$$maybeRenderHead($$result)}<div>
    <div>
    <h2>
        ${title}
    </h2>
    ${
        tables.map((table: Table) => (
        $$render`${$$renderComponent($$result,'Fragment',Fragment,{},{"default": () => $$render`
            <div>
            <h3 class="text-3xl sm:text-5xl font-bold">${table.title}</h3>
            <table>
                <thead>
                ${Object.keys(table.data[0]).map((thead) => (
                    $$render`<th>${thead}</th>`
                ))}
                </thead>
                <tbody>
                ${table.data.map((trow) => (
                    $$render`<tr>
                    ${Object.values(trow).map((cell, index) => (
                        $$render`<td>
                        ${cell}
                        </td>`
                    ))}
                    </tr>`
                ))}
                </tbody>
            </table>
            </div>
        `,})}`
        ))
    }
    </div>
</div>`;
}, undefined, undefined);
export default $$Component;
```
---
