
[TestPrinter/expressions_with_JS_comments - 1]
## Input

```
/-/-/-/
const items = ['red', 'yellow', 'blue'];
/-/-/-/
<div>
  {items.map((item) => (
    // foo < > < }
    <div id={color}>color</div>
  ))}
  {items.map((item) => (
    /* foo < > < } */ <div id={color}>color</div>
  ))}
</div>
```

## Output

```js
import {
  Fragment,
  render as $$render,
  createAstro as $$createAstro,
  createComponent as $$createComponent,
  renderComponent as $$renderComponent,
  renderHead as $$renderHead,
  maybeRenderHead as $$maybeRenderHead,
  unescapeHTML as $$unescapeHTML,
  renderSlot as $$renderSlot,
  mergeSlots as $$mergeSlots,
  addAttribute as $$addAttribute,
  spreadAttributes as $$spreadAttributes,
  defineStyleVars as $$defineStyleVars,
  defineScriptVars as $$defineScriptVars,
  renderTransition as $$renderTransition,
  createTransitionScope as $$createTransitionScope,
  renderScript as $$renderScript,
  createMetadata as $$createMetadata
} from "http://localhost:3000/";

export const $$metadata = $$createMetadata(import.meta.url, { modules: [], hydratedComponents: [], clientOnlyComponents: [], hydrationDirectives: new Set([]), hoisted: [] });

const $$Component = $$createComponent(($$result, $$props, $$slots) => {

const items = ['red', 'yellow', 'blue'];

return $$render`${$$maybeRenderHead($$result)}<div>
  ${items.map((item) => (
    // foo < > < }
    $$render`<div${$$addAttribute(color, "id")}>color</div>`
  ))}
  ${items.map((item) => (
    /* foo < > < } */ $$render`<div${$$addAttribute(color, "id")}>color</div>`
  ))}
</div>`;
}, undefined, undefined);
export default $$Component;
```
---
